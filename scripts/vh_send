#! /bin/tcsh
#
#########################################
# $Id: vh_send,v 1.2 2015/11/25 17:08:53 dauerbach Exp $
#
#########################################
if ($#argv != 1) then
  echo ""
  echo ""
  echo "  THIS IS CLONED FROM r2q_send for the temporary purpose of sending backlog VH* data"
  echo "  from the period between 2015-110 and 2015-321. After Linbux transition VH generation "
  echo "  was not available until 2015-321."
  echo ""
  echo "  ========================="
  echo "  usage:   vh_send sta"
  echo "  example: vh_send borg"
  echo "  ========================="
  echo ""
  echo "  vh_send is to send to DMC a single mini-SEED file with VH data gnerated by vh_gen "
  echo "  and stored in /ida/tmp/daily/miniseed/ with a name: $sta.vh.ms."
  echo ""
  echo "  Each run of vh_send wil"
  echo ""
  echo "  These mini-SEED data are generated by 'vh_gen' for all stations on a given day."
  echo ""
  echo "  vh_send uses 'miniseed2dmc', a DMC program, to transfer data to DMC and monitor"
  echo "  the transferring process."
  echo ""
  echo "  miniseed2dmc, according to its man page, is to 'transfers selected Mini-SEED data"
  echo "  records from the local computer to a remote Data Managment Center.'  Users will need"
  echo "  to contact DMC to get assigned host and port for such transfering before using it."
  echo ""
  echo "  IDA has been assigned to use port 16105 for sending files to ringsub.iris.washington.edu"
  echo ""
  echo "  To keep track the status of data transmission, miniseed2dmc creates a statefile in a local"
  echo "  working directory.  It also creates a SYNC file in the same directory to display/track the"
  echo "  data coverage of the transferred mini-SEED data.  The name of SYNC file contains the"
  echo "  connection start and end times when the data was sent.  For examples:"
  echo ""
  echo "     2014-10-28T10:36:25--2014-10-28T10:36:25.sync"
  echo "     2014-10-27T09:54:13--2014-10-27T09:54:13.sync"
  echo ""
  echo "  vh_send names the statefiles ending in 'statefile.$sta.vh'
  echo ""
  echo "  Each run of vh_send, ie miniseed2dmc, will create a SYNC file and a statefile."
  echo ""
  echo ""
  echo "  See r2q_send for more details on miniseed2dmc options."
  echo ""
  echo ""
  echo "  When miniseed2dmc is executed successfully, the VH mini-SEED file in /ida/tmp/daily/miniseed"
  echo "  will be moved to a directory /ida/tmp/daily/miniseed/2015_vh/DONE."
  echo "  The statefile will be copied to /ida/tmp/daily/SYNC/DONE.statefile for future reference, if necessary."
  echo "  The SYNC files will be kept in /ida/tmp/daily/SYNC for a week and then forwarded to DMC's engine_room,"
  echo "  engine_room@iris.washington.edu by a cronjob.  See r2q_sync for details."
  echo ""
  echo "  If newer/better mini-SEED data become available later, they will replace the existing ones in DONE/."
  echo ""
  exit
endif


#
# directory that contains VH mini-SEED data
# 
set sta = `echo $1 | ucase`
set dir   = /ida/tmp/daily/miniseed

#
# host and port are assigned by DMC
#
set host  = ringsub.iris.washington.edu
set port  = 16105

set syncdir = /ida/tmp/daily/SYNC

# for some reason -S does not work well with -w, so let's just cd to syncdir
cd $syncdir

#
# -p is to pretend, process input as usual and write the state and SYNC files but do NOT connect or send files.
# -r 0 is to search mini-SEED data in the given directory and '0' means subdirectories will not be searched.
# -l is to specify an ASCII file containing mini-SEED files to be sent to DMC.
# -w is to specify a working directory other than the current directory for storing statefiles and SYNC files.
# -S is to name a statefile different from the default, 'statefile'.
#

#rm -f /tmp/list.$$
#ls $dir/$sta.vh.ms > /tmp/list.$$

rm -f /tmp/ms2dmc.log.$$ 

echo miniseed2dmc -w $syncdir -S statefile.$sta.vh "$host":"$port" $dir/$sta.vh.ms
     miniseed2dmc -w $syncdir -S statefile.$sta.vh "$host":"$port" $dir/$sta.vh.ms >& /tmp/ms2dmc.log.$$
# practice     miniseed2dmc -p -w $syncdir -S statefile.$sta.vh "$host":"$port" $dir/$sta.vh.ms >& /tmp/ms2dmc.log.$$

#
# If everything is sent, move files around and clean it
#   1. move all .ms files into $dir/DONE/
#   2. move db/ (from running r2q_view) into $dir/DONE/ 
#   3. move statefile into $syncdir/DONE.statefile
#   4. move running log, /tmp/ms2dmc.log.$$ r2q_send.log into $syncdir/DONE.statefile/r2q_send.log.$jdate
#
# Otherwise, leave everything in place
#

grep "All data transmitted" /tmp/ms2dmc.log.$$

if ($status == 0) then			# yes, all data sent to DMC, move them to DONE
  set flag = 'DONE'

  # move VF ms files
  if (! -d $dir/2015_vh/DONE) mkdir -p $dir/2015_vh/DONE	# make DONE/ first
  \mv $dir/$sta.vh.ms $dir/2015_vh/DONE		# MOVE/REPLACE ms files in DONE/

  # clear out old summary file
  if (-f $dir/2015_vh/DONE/summary.csv) rm -f $dir/2015_vh/DONE/summary.csv

  # generate new summary file
  msi -tg -Q -tf 2 $dir/2015_vh/DONE/*.ms | awk '{print $1 ", " $2 ", " $3 ", " $5}' > $dir/2015_vh/DONE/summary.csv


  # move statefile
  if (-f $syncdir/DONE.statefile/statefile.$sta.vh) then
    cat $syncdir/statefile.$sta.vh >> $syncdir/DONE.statefile/statefile.$sta.vh
    rm -f $syncdir/statefile.$sta.vh
  else
    mv $syncdir/statefile.$sta.vh $syncdir/DONE.statefile
  endif

  if (-f $syncdir/DONE.statefile/r2q_send.log.vh) then
    cat /tmp/ms2dmc.log.$$ >> $syncdir/DONE.statefile/r2q_send.log.vh
  else
    cp -p /tmp/ms2dmc.log.$$ $syncdir/DONE.statefile/r2q_send.log.vh 
  endif


else
  set flag = 'ERROR'

  cat /tmp/ms2dmc.log.$$

endif

set admin = 'ezak@ucsd.edu,dauerbach@ucsd.edu'
#Mail -s "miniseed2dmc $sta.vh.ms status:$flag" $admin < /tmp/ms2dmc.log.$$

rm /tmp/ms2dmc.log.$$

exit


##########################################
# $Log: vh_send,v $
# Revision 1.2  2015/11/25 17:08:53  dauerbach
# Add cvs keys
#
#
##########################################
