#!/bin/csh -f
#
# Manage SSH tunnels

set debug  = 1
set myname = CheckTunnels
set lock   = /var/tmp/$myname.lock
set match  = /var/tmp/$myname.matches.$$

if ($debug) logger -t $myname"[$$]" -p local0.info "begin"

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p local0.info "$message"
    echo "${myname}: $message"
    exit 1
endif
source $setup

# These are not expected to need to be changed, so we hardcode them here

set LocalData    = 39136
set LocalShell   = 22
set TunnelUser   = tunnel
set TunnelName   = `hostname`
set TunnelPorts  = $NRTS_HOME/etc/Tunnels
set TunnelPeers  = $NRTS_HOME/etc/TunnelPeers
set default_peer = idahub

#More than one argument is not allowed
if ($#argv > 1) then
    set message = "${myname}: unrecognized argument(s): $argv"
    echo $message
    if ($debug) logger -t $myname"[$$]" -p local0.info "unrecognized argument(s): $argv"
    exit 1
endif

# Single argument is assumed option flag to force a tunnel bounce
if ($#argv == 1) then
    if ($argv[1] == "--bounce") then
        if ($debug) logger -t $myname"[$$]" -p local0.info "bounce option triggering kill of all ssh tunnels"

        set list = `/bin/ps -ax -o pid,user,command | egrep "nrts +ssh -f -N" | awk '{print $1}'`
        foreach pid ($list)

            if ($debug) then
                set cmd = `ps -p $pid -o command | grep -v COMMAND`
                logger -t $myname"[$$]" -p local0.debug "Bouncing tunnel:[${pid}] $cmd"
            endif

            kill -TERM $pid  >& /dev/null

            if ($debug) logger -t $myname"[$$]" -p local0.debug "Bounced: [${pid}]"

        end
    else
        set message = "${myname}: unrecognized argument(s): $argv"
        echo $message
        if ($debug) logger -t $myname"[$$]" -p local0.info "unrecognized argument(s): $argv"
        exit 1
    endif
endif

# Tunnel endpoint is idahub, unless more or alternate destinations
# are specified in the optional config file

if (-e $TunnelPeers) then
    set RemoteHostList = `stripcat $TunnelPeers`
else
    set RemoteHostList = $default_peer
endif

# Get the port numbers from the lookup table
if (! -e $TunnelPorts) then
    if ($debug) logger -t $myname"[$$]" -p local0.info "$TunnelPorts not present"
    exit 1
endif

# Find host matches in Tunnels file
stripcat $TunnelPorts | grep -i " $TunnelName " > $match
set exitstatus = $status
if ($exitstatus != 0) then
    if ($debug) logger -t $myname"[$$]" -p local0.info "can't extract ports for $TunnelName from $TunnelPorts"
    rm -rf $match
    exit 1
endif
set PortStrings = ( "`cat $match`" )
rm -rf $match

# Make sure no other instance of this script is running

filelock $lock $$
if ($status != 0) then
    if ($debug) logger -t $myname"[$$]" -p local0.info "another instance already active"
    rm -rf $match
    exit 0
endif

# Loop for all tunnels

foreach RemoteHost ($RemoteHostList)

    # need to do loop like this cause PortStrings is a list of lines with multiple words
    @ ndx = 0
    while ( $ndx < ${#PortStrings} )

        @ ndx++

        set PortString = (`echo ${PortStrings[$ndx]} | lcase`)

        # reinitialize defaults
        set LocalData    = 39136
        set LocalShell   = 22
        set TunnelUser   = tunnel
        set TunnelHost   = $RemoteHost
        set RemoteData = `echo $PortString | awk '{print $2}'`
        set RemoteShell = `echo $PortString | awk '{print $3}'`

        if (${#PortString} == 3) then
            # if PortString only has 3 parts it is the standard, simple situation using default above.
            # this is tunnel record for current host, this is standard/simplest case
            # use defaults no need to do/override  anything

        else if (${#PortString} == 7) then
            # this record has gateway info in it.
            # Need to check whether current host IS the gateway-host (in column 5)

            if ($TunnelName == ${PortString[1]}) then
                # this is primary record for current host
                # But need to use gateway port
                set TunnelUser = $PortString[4]
                set TunnelHost = $PortString[5]
                set RemoteData = $PortString[6]
                set RemoteShell = $PortString[7]

            else if ($TunnelName == ${PortString[5]}) then
                # this is a gateway record for a gateway host (e.g. cmla1 <dataport> <shellport> <gwuser> cmla-gw ...)
                set LocalData = $PortString[6]
                set LocalShell = $PortString[7]
            else 
                if ($debug) logger -t $myname"[$$]" -p local0.info "can't find $TunnelName in invalid record $PortString"
            endif

        else
            if ($debug) logger -t $myname"[$$]" -p local0.info "invalid record $PortString"
            continue
        endif

        if ($debug) logger -t $myname"[$$]" -p local0.info "LocalData = $LocalData"
        if ($debug) logger -t $myname"[$$]" -p local0.info "LocalShell = $LocalShell"
        if ($debug) logger -t $myname"[$$]" -p local0.info "RemoteData = $RemoteData"
        if ($debug) logger -t $myname"[$$]" -p local0.info "RemoteShell = $RemoteShell"
        if ($debug) logger -t $myname"[$$]" -p local0.info "TunnelUser = $TunnelUser"
        if ($debug) logger -t $myname"[$$]" -p local0.info "TunnelHost = $TunnelHost"

        logger -t $myname"[$$]" -p user.notice "Starting SSH tunnels into $RemoteHost"
        # NOTE: Do not change the order of the ssh parameters without consider BounceTunnels
        set command = "ssh -f -N -R ${RemoteData}:localhost:${LocalData} -R ${RemoteShell}:localhost:${LocalShell} ${TunnelUser}@${TunnelHost}"
        logger -t $myname"[$$]" -p user.notice "$command"

        # Create tunnel only if not already running

        pgrep -f "$command" >& /dev/null
        if ($status == 0) then
            if ($debug) logger -t $myname"[$$]" -p local0.info "tunnel already present"
        else
            # Launch the tunnel
            $command
        endif
    end

end

if ($debug) logger -t $myname"[$$]" -p local0.info "end (success)"
exit 0

