#!/bin/tcsh -f
#
# Move all .gz (and .GZ) tee files from the named source dir to
# year/day subdirectories in the named destination dir
# and convert gz (ida10) files to miniseed, run through dataselect to 
# geenrate a 'buddir' like directory & file structure

set myname = ArchiveGzFiles

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    goto failure
endif
source $setup

# Check for debug flag

if (-e $DebugDir/$myname) then
    set debug = 1
else
    set debug = 0
endif

if ($debug) logger -t $myname"[$$]" -p user.info "begin"

# Command line setup

set error = 0
if ($#argv == 2) then
    set srcdir  = $argv[1]
    set dstroot = $argv[2]
    set site    = `basename $dstroot | ucase`
    set lsite    = `basename $dstroot | lcase`
else
    set error = 1
endif

if ($error) then
    set message = "bad command line, error $error"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    echo "usage: $myname srcdir dstdir"
    goto failure
endif

# Nothing to do if the directories don't exist

foreach dir ($srcdir $dstroot)
    if (! -d $dir) then
        logger -t $myname"[$$]" -p user.info "ERROR: no such dir $dir"
        set error = 1
    endif
end

if ($error) then
    logger -t $myname"[$$]" -p user.info "ERROR: required directories are missing"
    goto failure
endif

# Work in the source directory

cd $srcdir
if ($status != 0) then
    logger -t $myname"[$$]" -p user.info "ERROR: can't chdir $srcdir"
    goto failure
endif

set dummy = 4_______________________.gz
touch $dummy

# keek a copy of days that have been added to and just process them into miniseed once
set msdays = 

foreach file ([4-9]???????????????????????.gz [4-9]???????????????????????.GZ)
    if ($file != $dummy) then
        set datelist = `idaspan -yd rev=10 < $file | sort | uniq`
        foreach date ($datelist)
            # build name of 'siteday' MS file for all day's data: <site>-<yyyy>-<jjj>.ms
            # This will keep growing with each gz file, but  Dataselect with takw care of overlaps
            # File will be put in $destdir (<sta>/<YYYY>/<jjj>)
			set year      = `echo ${date} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\1/"`
			set jday      = `echo ${date} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\2/"`
			set sitedayms = ${site}-${year}-${jday}.ms
            #set sitedayms = `echo "${site}-${date}.ms" | sed -e "s/\//-/g"`               # construct site-yyyy-jjj from yyyy/jjj
            set msdays = ($msdays $date)                                                  # note day we're modifying
            set destdir = $dstroot/$date
            if (! -d $destdir) then
                set command = "mkdir -p $destdir"
                if ($debug) logger -t $myname"[$$]" -p user.info "$command"
                $command
            endif
            if (! -d $destdir) then
                logger -t $myname"[$$]" -p user.info "ERROR: missing $destdir"
                rm $dummy
                goto failure
            endif
            set destpath = `uniqpath suflen=3 $file $destdir`
            set command = "cp -p $file $destpath"
            if ($debug) logger -t $myname"[$$]" -p user.info "$command"
            $command
            if ($status != 0) then
                logger -t $myname"[$$]" -p user.info "FAILED: $command"
                rm $dummy
                goto failure
            endif


            set msdir    = ${IDA_ARCHIVE_MS_DIR}/${lsite}/${date}
            mkdir -p $msdir   # TODO: Add error checking

            # conversion to MS and append to whole-day ms filea
            # TODO: See if a better/simpler way to construct and execute this command. Had trouble with '<' and '>' chars
            set cmd      = "imseed sta=$site"
            set filepath = `pwd`/$file
            set msfile   = ${msdir}/${sitedayms}                   # append ms data to whole day ms file
            set command  = "$cmd < $filepath >>! $msfile"
            echo $command >>! ${IDA_ARCHIVE_MS_DIR}/converted-to-ms

            if ($debug) logger -t $myname"[$$]" -p user.info "$command"

            # send stderr output to log file.
            ($cmd < $filepath >>! $msfile) >>& ${IDA_ARCHIVE_MS_DIR}/converted-to-ms
            if ($status != 0) then 
                logger -t $myname"[$$]" -p user.info "FAILED: $command"
                rm $dummy
                rm -rf $msfile
                goto failure
            endif
            #echo $msout >>! ${IDA_ARCHIVE_MS_DIR}/converted-to-ms

            set command = "chmod 444 $destpath"
            if ($debug) logger -t $myname"[$$]" -p user.info "$command"
            $command
            set command = "dupchk $destpath"
            if ($debug) logger -t $myname"[$$]" -p user.info "$command"
            $command
            if ($status != 0) logger -t $myname"[$$]" -p user.info "WARNING: $command FAILED (ignored)"
        end
        set command = "rm -f $file"
        if ($debug) logger -t $myname"[$$]" -p user.info "$command"
        $command
    endif
end
rm -f $dummy

# now loop through and process any miniseed day files into 'bud-like' structure

# first lets get unique days...
set msdays = `echo $msdays | tr ' ' '\012' | sort | uniq`
foreach day ($msdays) 

	set year      = `echo ${day} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\1/"`
	set jday      = `echo ${day} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\2/"`
	set sitedayms = ${site}-${year}-${jday}.ms
	set dayms = ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/${sitedayms}

    if ($debug) logger -t $myname"[$$]" -p user.info "Moving previous run files into TEMP dir..."
    # first lets move existing files to TEMP dir
    mkdir -p ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/TEMP
    mv -f ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/*.${year}.${jday} ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/TEMP/ > /dev/null
    # TODO: SOme error checking perhaps...

    if ($debug) logger -t $myname"[$$]" -p user.info "Prepping whole-day ms file for run through dataselect..."
	# now run through dataselect
	# -Sd - split data on day boundaries
	# -Ps - prune data at the sample level and collapse overlaps
	# -ts - start time
	# -te - end time
	set command = "dataselect -Sd -Ps -ts ${year}.${jday}.00.00.00 -te ${year}.${jday}.23.59.59.999 -A ${IDA_ARCHIVE_MS_DIR}/${lsite}/%Y/%j/%n.%s.%l.%c.%Y.%j $dayms"
	if ($debug) logger -t $myname"[$$]" -p user.info "$command"
	$command
	if ($status != 0) then
		logger -t $myname"[$$]" -p user.info "FAILED: $command"
		goto failure
	endif
	echo $command >>! ${IDA_ARCHIVE_MS_DIR}/processed-by-dataselect
	
    set command = "msi -S ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/II.${site}.*.*.${year}.${jday}"
    set invfn   = ${IDA_ARCHIVE_MS_DIR}/${lsite}/${day}/inventory
	if ($debug) logger -t $myname"[$$]" -p user.info "$command '>!' $invfn"
	$command >! $invfn
    set savestat = $status
	if ($savestat != 0) then
		logger -t $myname"[$$]" -p user.info "FAILED: [retcode: $savestat] $command '>!' $invfn"
		goto failure
	endif
	echo "$command '>!' $invfn" >>! ${IDA_ARCHIVE_MS_DIR}/processed-by-dataselect
	
end


# Normal exit

success:
if ($debug) logger -t $myname"[$$]" -p user.info "completed OK"
exit 0

failure:
logger -t $myname"[$$]" -p user.info "exit 1"
exit 1

