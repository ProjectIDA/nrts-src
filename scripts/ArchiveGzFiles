#!/bin/tcsh -f
#
# Move all .gz (and .GZ) tee files from the named source dir to
# year/day subdirectories in the named destination dir
# and convert gz (ida10) files to miniseed, run through dataselect to
# geenrate a 'buddir' like directory & file structure

set myname = ArchiveGzFiles

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p local0.error "$message"
    echo "${myname}: $message"
    goto failure
endif
source $setup

# Check for debug flag

if (-e $DebugDir/$myname) then
    set debug = 1
else
    set debug = 0
endif

if ($debug) logger -t $myname"[$$]" -p local0.debug "begin"

# Command line setup

set error = 0
if ($#argv == 4) then
    set srcdir  = $argv[1]
    set lsite   = `echo $argv[2] | lcase`
    set RawArchiveDir = $argv[3]
    set MSArchiveDir = $argv[4]
    set raw_dstroot = $RawArchiveDir/$lsite
    set ms_dstroot = $MSArchiveDir/$lsite
    set site    = `echo lsite | ucase`
else
    set error = 1
endif

if ($error) then
    set message = "bad command line, error $error"
    logger -t $myname"[$$]" -p local0.error "$message"
    echo "${myname}: $message"
    echo "usage: $myname srcdir lsite raw_root_dir ms_root_dir"
    goto failure
endif

# Nothing to do if the directories don't exist

foreach dir ($srcdir $raw_dstroot)
    if (! -d $dir) then
        logger -t $myname"[$$]" -p local0.error "ERROR: no such dir $dir"
        set error = 1
    endif
end

if (! -d $ms_dstroot) then
    mkdir -p $ms_dstroot >& /dev/null
    if ($? != 0) set error = 1
endif

if ($error) then
    logger -t $myname"[$$]" -p local0.error "ERROR: required directories are missing"
    goto failure
endif

# Work in the source directory

cd $srcdir
if ($status != 0) then
    logger -t $myname"[$$]" -p local0.error "ERROR: can't chdir $srcdir"
    goto failure
endif

set dummy = 4_______________________.gz
touch $dummy

# keek a copy of days that have been added to and just process them into miniseed once
set msdays =

foreach file ([4-9]???????????????????????.gz [4-9]???????????????????????.GZ)
    if ($file != $dummy) then
        set datelist = `idaspan -yd rev=10 < $file | sort | uniq`
        foreach date ($datelist)

            # keep track of days processed so miniseed archive can be updated for each day
            set msdays = ($msdays $date)

            # File will be put in $destdir (<sta>/<YYYY>/<jjj>)
            set destdir = $raw_dstroot/$date
            if (! -d $destdir) then
                set command = "mkdir -p $destdir"
                if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
                $command
            endif
            if (! -d $destdir) then
                logger -t $myname"[$$]" -p local0.error "ERROR: missing $destdir"
                rm $dummy
                goto failure
            endif
            set destpath = `uniqpath suflen=3 $file $destdir`
            set command = "cp -p $file $destpath"
            if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
            $command
            if ($status != 0) then
                logger -t $myname"[$$]" -p local0.error "FAILED: $command"
                rm $dummy
                goto failure
            endif

            set command = "chmod 444 $destpath"
            if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
            $command
            set command = "dupchk $destpath"
            if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
            $command
            if ($status != 0) logger -t $myname"[$$]" -p local0.error "WARNING: $command FAILED (ignored)"
        end
        set command = "rm -f $file"
        if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
        $command
    endif
end
rm -f $dummy

# now loop through and process any miniseed day files into 'bud-like' structure

# first lets get unique days...
set msdays = `echo $msdays | tr ' ' '\012' | sort | uniq`
foreach day ($msdays)

    set year      = `echo ${day} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\1/"`
    set jday      = `echo ${day} | sed -e "s/\([0-9]\{4\}\)\/\([0-9]\{3\}\)/\2/"`

    set command = "ArchiveRawToMiniseed ${lsite} ${year} ${jday} ${RawArchiveDir} ${MSArchiveDir}"
    if ($debug) logger -t $myname"[$$]" -p local0.debug "$command"
    $command
end


# Normal exit

success:
if ($debug) logger -t $myname"[$$]" -p local0.debug "completed OK"
exit 0

failure:
logger -t $myname"[$$]" -p local0.error "exit 1"
exit 1

