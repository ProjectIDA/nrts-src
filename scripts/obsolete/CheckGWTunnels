#!/bin/csh -f
# "$Id: CheckGWTunnels,v 1.1 2017/07/06 21:07:32 dauerbach Exp $
#
# Manage tunnels to an SSH gateway.
# usage: CheckGWTunnels { primary | secondary | gateway }

set debug  = 0
set myname = CheckGWTunnels
set lock   = /var/tmp/$myname.lock

if ($debug) logger -t $myname"[$$]" -p user.info "begin"

# General setup

set setup  = ~nrts/scripts/ScriptSetup
if (! -e $setup ) then
    set message = "missing $setup"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    exit 1
endif
source $setup

# check for required args

if ($#argv == 0) then
    set message = "missing mode argument"
    logger -t $myname"[$$]" -p user.info "$message"
    echo "${myname}: $message"
    exit 1
else if ($#argv > 1) then
	# More than one argument is not allowed

    set message = "${myname}: unrecognized argument(s): $argv"
    echo $message
    if ($debug) logger -t $myname"[$$]" -p user.info "unrecognized argument(s): $argv"
    exit 1
endif

# These are default values that may be overridden depending on the mode passed as parameter

set MyData       = 39136
set MyShell      = 22
set TunnelUser   = tunnel
set TunnelName   = `hostname`
set TunnelPorts  = $NRTS_HOME/etc/Tunnels
set TunnelPeers  = $NRTS_HOME/etc/TunnelPeers
set default_peer = idahub

# Get the port numbers from the lookup table

if (! -e $TunnelPorts) then
    if ($debug) logger -t $myname"[$$]" -p user.info "$TunnelPorts not present"
    exit 1
endif

set PortString = `stripcat $TunnelPorts | grep -i " $TunnelName " `
set exitstatus = $status
if ($exitstatus != 0) then
    if ($debug) logger -t $myname"[$$]" -p user.info "can't extract ports for $TunnelName from $TunnelPorts"
    exit 1
endif


# Tunnel endpoint is idahub, unless more or alternate destinations
# are specified in the optional config file

if (-e $TunnelPeers) then
    set RemoteHostList = `stripcat $TunnelPeers`
else
    set RemoteHostList = $default_peer
endif

# Get the port numbers from the lookup table

if (! -e $TunnelPorts) then
    if ($debug) logger -t $myname"[$$]" -p user.info "$TunnelPorts not present"
    exit 1
endif

set PortString = `stripcat $TunnelPorts | grep -i " $TunnelName " `
set exitstatus = $status
if ($exitstatus != 0) then
    if ($debug) logger -t $myname"[$$]" -p user.info "can't extract ports for $TunnelName from $TunnelPorts"
    exit 1
endif

# Extract default ports
set RemoteData = `echo $PortString | awk '{print $2}'`
set RemoteShell = `echo $PortString | awk '{print $3}'`


if ($argv[1] == "primary") then
	set mode = PRIMARY
else if ($argv[1] == "secondary") then
	set mode = SECONDARY
else if ($argv[1] == "gateway") then
	set mode = GATEWAY
else
	set message = "unrecognized mode argument '$argv[1]'"
	logger -t $myname"[$$]" -p user.info "$message"
	echo "${myname}: $message"
	exit 1
endif

# Make sure no other instance of this script is running

filelock $lock $$
if ($status != 0) then
    if ($debug) logger -t $myname"[$$]" -p user.info "another instance already active"
    exit 0
endif

# Loop for all tunnels

foreach RemoteHost ($RemoteHostList)

    # See if tunnel is already running

		if ($mode == "PRIMARY") then
			set RemoteData = 10036
			set RemoteShell = 10022
			set RemoteHost = cmla-gw
			set TunnelUser = nrts

        	if ($debug) logger -t $myname"[$$]" -p user.info "MyData = $MyData"
        	if ($debug) logger -t $myname"[$$]" -p user.info "MyShell = $MyShell"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteData = $RemoteData"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteShell = $RemoteShell"

        	# Launch the tunnel

        	logger -t $myname"[$$]" -p user.notice "Starting SSH tunnels into $RemoteHost as user $TunnelUser"
        	set command = "ssh -f -N -R ${RemoteData}:localhost:${MyData} -R ${RemoteShell}:localhost:${MyShell} ${TunnelUser}@${RemoteHost}"
        	logger -t $myname"[$$]" -p user.notice "$command"

			pgrep -f "$command" >& /dev/null
			if ($status == 0) then
				if ($debug) logger -t $myname"[$$]" -p user.info "tunnel already present"
			else
				$command
			endif

		else if ($mode == "SECONDARY") then
			set RemoteData = 20036
			set RemoteShell = 20022
			set RemoteHost = cmla-gw
			set TunnelUser = nrts

          	if ($debug) logger -t $myname"[$$]" -p user.info "MyData = $MyData"
        	if ($debug) logger -t $myname"[$$]" -p user.info "MyShell = $MyShell"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteData = $RemoteData"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteShell = $RemoteShell"

    	    # Launch the tunnel

        	logger -t $myname"[$$]" -p user.notice "Starting SSH tunnels into $RemoteHost as user $TunnelUser"
        	set command = "ssh -f -N -R ${RemoteData}:localhost:${MyData} -R ${RemoteShell}:localhost:${MyShell} ${TunnelUser}@${RemoteHost}"
        	logger -t $myname"[$$]" -p user.notice "$command"

			pgrep -f "$command" >& /dev/null
			if ($status == 0) then
				if ($debug) logger -t $myname"[$$]" -p user.info "tunnel already present"
			else
				$command
			endif

		else if ($mode == "GATEWAY") then
			# set up for station computers
			# list of ports for pri and sec computers
			set RemoteData = (59138 59139)
			set RemoteShell = (8024 8025)
			set MyData = (10036 20036)
			set MyShell = (10022 20022)
          	if ($debug) logger -t $myname"[$$]" -p user.info "MyData (primary) = $MyData[1];  MyData (secondary) = $MyData[2]"
        	if ($debug) logger -t $myname"[$$]" -p user.info "MyShell (primary) = $MyShell[1];  MyShell (secondary) = $MyShell[2]"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteData (primary) = $RemoteData[1];  RemoteData (secondary) = $RemoteData[2]"
        	if ($debug) logger -t $myname"[$$]" -p user.info "RemoteShell = $RemoteShell[1];  RemoteShell (secondary) = $RemoteShell[2]"

    	    # Launch the tunnel for primary station computer

        	logger -t $myname"[$$]" -p user.notice "Starting SSH tunnels for primary station computer into $RemoteHost as user $TunnelUser"
        	set command = "ssh -f -N -R ${RemoteData[1]}:localhost:${MyData[1]} -R ${RemoteShell[1]}:localhost:${MyShell[1]} ${TunnelUser}@${RemoteHost}"
        	logger -t $myname"[$$]" -p user.notice "$command"
        	
			pgrep -f "$command" >& /dev/null
			if ($status == 0) then
				if ($debug) logger -t $myname"[$$]" -p user.info "tunnel already present"
			else
				$command
			endif


        	logger -t $myname"[$$]" -p user.notice "Starting SSH tunnels for secondary station computer into $RemoteHost as user $TunnelUser"
			set command = "ssh -f -N -R ${RemoteData[2]}:localhost:${MyData[2]} -R ${RemoteShell[2]}:localhost:${MyShell[2]} ${TunnelUser}@${RemoteHost}"
        	logger -t $myname"[$$]" -p user.notice "$command"

			pgrep -f "$command" >& /dev/null
			if ($status == 0) then
				if ($debug) logger -t $myname"[$$]" -p user.info "tunnel already present"
			else
				$command
			endif


		else
			set message = "unrecognized mode argument $mode"
			logger -t $myname"[$$]" -p user.info "$message"
			echo "${myname}: $message"
			exit 1
		endif

end

exit 0

# Revision History
#
# $Log: CheckGWTunnels,v $
# Revision 1.1  2017/07/06 21:07:32  dauerbach
# Initial version cloned from CheckTunnels and deployed first at CMLA
# sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
#
# Revision 1.9  2015/12/10 00:00:15  dechavez
# undid the previous change, now use ~nrts instead of NRTS_HOME to load the setup script
# (didn't work in cron, duh)
#
# Revision 1.8  2015/12/07 22:18:43  dechavez
# don't assume user nrts (use NRTS_HOME environment varible instead)
#
# Revision 1.7  2013/10/25 21:10:08  dechavez
# reorded stuff so that the path is right when invoked via cron
#
# Revision 1.6  2013/10/25 17:17:40  dechavez
# change from hard-coded list of peers to optional ~/etc/TunnelPeers
#
# Revision 1.5  2013/08/07 17:38:55  dechavez
# fixed restart problem when one of two tunnels was present
#
# Revision 1.4  2013/07/26 22:05:11  dechavez
# set up tunnels to both idahub and pidahub
#
# Revision 1.3  2012/12/05 21:15:37  dechavez
# Change target key to be hostname instead of default site (allows for more
# than one computer per site to tunnel into idahub), and allow for the local
# data and ssh ports to get assigned on the command line.
#
# Revision 1.2  2008/05/06 20:44:48  dechavez
# use pgrep -f to check for existing tunnels
#
# Revision 1.1  2008/05/06 20:29:13  dechavez
# created
#
