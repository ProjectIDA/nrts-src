#!/bin/csh -f
#
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
#
# $Id: mkdless,v 1.10 2017/02/17 18:19:06 dauerbach Exp $
# Wrapper script to generate dataless SEED from IDA database,
# while preserving everything for posterity

set release  = 1.3.0                  # version ident for this script
set date     = `date +%Y:%j-%H:%M:%S` # For time stamping log messages
set dbdir    = /ida/dcc/db            # Directory with the Datascope db
set dbtag    = IDA                    # The db we will use
set db       = ${dbdir}/${dbtag}      # The db name as expected by the program
set base     = `pwd`                  # Working in current directory
set tag      = `date +%Y%m%dT%H%M%S`  # How we keep them identified
set root     = ${base}/${tag}         # Where everything will go
set dbcopy   = ${root}/db             # Where we save a copy of the input database
set log      = ${root}/mkdless.log    # Log for this run
set respdir  = ${root}/RESP           # subdir for channel RESP files

set chatty = 1
set fail    = 0
set seed_list = ()


while ($#argv)
    if ("$argv[1]" == "-q") then
        set chatty = 0
    else if ("$argv[1]" == "-h") then
        set fail = 1
    else if ("$argv[1]" == "-s") then 
	if ($#argv >= 2) then
		set seed_list = `echo $argv[2] | sed 's/,/ /g' | ucase`
		shift
	else
	        echo "ERROR: missing comma-separated station list after '-s'"
		set fail = 1
	endif
    else if ("$argv[1]" == "-a") then
        # create new dataless seeds for ALL stations
	set seed_list = `awk '{print $1}' $dbdir/IDA.chan | sort | uniq`
    else
        echo "ERROR: unrecognized argument '$argv[1]'"
        set fail = 1
    endif
    shift
end


# append NETWORK to list of stations (if supplied), 
# so we can just loop over podir/run_pod for each
set seed_list = ( $seed_list NETWORK )


# Bad user
if ($fail) then
    echo "mkdless release: $release"
    echo ""
    echo "Usage: mkdless [ -q ] [ -a | -s STA1[,STA2] ]"
    echo "       -a : produce dataless for all STATIONS in IDA.chan table"
    echo "       -s STA1[,STA2] : produce dataless for each STATION specified bvy code"
    echo "       Network dataless always produced."
    echo "Script will generate a local subdirectory containing dataless SEED plus input files"
    exit 1
endif

# Will work in ./YYYYMMDDTHHMMSS

if (-e $root) then
    echo "ERROR: $root already exists"
    exit 1
endif

mkdir -p $root
if ($status != 0) then
    echo "ERROR: can't mkdir -p $root"
    exit 1
endif

if ($chatty) echo "Working directory is ./${tag}"

cp /dev/null $log

echo `date +%Y:%j-%H:%M:%S` - mkdless release $release >> $log
if ($chatty) echo "---- mkdless release $release ----"

echo "Creating dataless SEED(s) for: '$seed_list'" >> $log
if ($chatty) echo "Creating dataless SEED for: '$seed_list'"


# Copy over the database

set command = "mkdir $dbcopy"
echo `date +%Y:%j-%H:%M:%S` - $command >> $log
$command >>& $log
if ($status != 0) then
    echo "ERROR: can't mkdir $dbcopy"
    goto failure
endif

if ($chatty) echo "Making a copy of the $db database"
set command = "cd $dbdir"
echo `date +%Y:%j-%H:%M:%S` - $command >> $log
$command >>& $log
if ($status != 0) then
    echo "ERROR: can't chdir $dbdir"
    goto failure
endif

echo "`date +%Y:%j-%H:%M:%S` - making a copy of the input database" >> $log
tar cf - IDA* sensors filters schemas | (cd $dbcopy ; tar xfp -) >> $log
if ($status != 0) then
    echo "ERROR: can't copy $db database"
    goto failure
endif

# Now work from within the root

set command = "cd $root"
echo `date +%Y:%j-%H:%M:%S` - $command >> $log
$command >>& $log
if ($status != 0) then
    echo "ERROR: can't chdir $root"
    goto failure
endif

# loop over $seed_list...
# building dataless files, each in a seperate $podtree dir

foreach seed ($seed_list)

    if ($seed == "NETWORK") then
	set seedname = II				# name of individual dataless seed file
	# set podir command keep param
        set podir_keep_param = ''
    else
	set seedname = "II_$seed"
	# set podir command
        set podir_keep_param = "keep=$seed"
    endif

    set podtree  = ${root}/pod.$seedname.tree       	# Where podir will build its tree
    set dataless = $seedname.${tag}.dataless     	# Name of dataless seed file
    set output   = ${root}/$dataless      		# Full path to dataless seed file
    set shorto   = ./${tag}/$dataless     		# Path to output volume referenced from current dir
    set rslog    = ${root}/rdseed.$seedname.log         # rdseed log for this volume


    # Build the POD tree using podir

    if ($chatty) echo "Generating POD tree: $podtree"

    set command = "podir -v db=${db} $podtree $podir_keep_param"

    echo "`date +%Y:%j-%H:%M:%S` - $command" >> $log
    $command >>& $log
    if ($status != 0) then
        echo "ERROR: can't build POD tree"
        goto failure
    endif


    # Now set up and run POD

    if ($chatty) echo "Generating dataless SEED from POD tree: $podtree"

    set command = "run_pod $podtree $output"
    echo `date +%Y:%j-%H:%M:%S` - $command >> $log
    $command >>& $log
    if ($status != 0) then
        echo "ERROR: run_pod command failed"
        goto failure
    endif


    # run rdseed

    if ($chatty) echo "Running rdseed on newly created dataless SEED: $output"

    set command = "rdseed -s -f $output"
    echo `date +%Y:%j-%H:%M:%S` - $command >> $log
    $command >>& $rslog
    if ($status != 0) then
        echo "ERROR: rdseed -s command failed"
        goto failure
    endif


    # IF NETWORK seed, generate RESP files...
    if ($seed == 'NETWORK') then

        set command = "mkdir $respdir"
        echo `date +%Y:%j-%H:%M:%S` - $command >> $log
        $command >>& $log
        if ($status != 0) then
            echo "ERROR: can't mkdir $respdir"
            goto failure
        endif

        set command = "cd $respdir"
        echo `date +%Y:%j-%H:%M:%S` - $command >> $log
        $command >>& $log
        if ($status != 0) then
            echo "ERROR: can't chdir $respdir"
            goto failure
        endif

        if ($chatty) echo "Generating RESP files"
        set command = "rdseed -R -f $output"
        echo `date +%Y:%j-%H:%M:%S` - $command >> $log
        $command >>& $rslog
        if ($status != 0) then
            cd ..
            echo "ERROR: rdseed -R command failed"
            goto failure
        endif

        # run gz ONLY on whoe NETWORK dataless....

        set command = "gzip $output"
        echo `date +%Y:%j-%H:%M:%S` - $command >>& $log
        $command >> $log
        if ($status != 0) then
           echo "ERROR: can't gzip output"
           goto failure
        endif
        if ($chatty) echo "${shorto}.gz created OK"

    endif

end

# done looping through $seed_list. Looking good...


exit 0


failure:
echo `date +%Y:%j-%H:%M:%S` - command failed >> $log
echo "Log file is $log"
exit 1

# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
#
# $Log: mkdless,v $
# Revision 1.10  2017/02/17 18:19:06  dauerbach
# EOL for mkdless in CVS REPO. Moved to git DCC-SCRIPTS repo
#
# Revision 1.9  2015/11/23 20:25:03  dauerbach
# Added release # to help message
#
# Revision 1.8  2015/11/23 20:17:52  dauerbach
# Added '-a' CLI switch to have a dataless file created for each station in DB
#
# Revision 1.7  2015/11/16 17:23:33  dauerbach
# Fix revision log comments
#
# Revision 1.6  2015/11/16 17:20:09  dauerbach
# Change output name convention to II.YYYYMMDDTHHMMSS.dataless
# Added option '-s' to specify comma seperated list of STA codes to indicate which 
# STATION dataless files that should be produced along with NETWORK dataless.
#     
#
# Revision 1.5  2015/10/02 23:00:18  dechavez
# Change output name convention to II.YYYYMMDD.dataless, use run_pod to invoke the pod command
#
# Revision 1.4  2015/09/10 18:07:01  dechavez
# include release in commentary and log, change name of log file to mkdless.log,
# run rdseed on newly created volume and save results in rdseed.log
#
# Revision 1.3  2015/08/27 16:05:34  dechavez
# first production release
#
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
# ALL FURTHER DEVELOPED MAINTAINED IN Git DCC-SCRIPTS Repo
